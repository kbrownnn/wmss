/*
 * Copyright (c) 2011-2012 LinogistiX GmbH
 *
 *  www.linogistix.com
 *
 *  Project myWMS-LOS
 */


package de.linogistix.common.gui.component.controls;

import de.linogistix.common.res.CommonBundleResolver;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 *
 * @author krane
 */
public class LOSImagePanel extends javax.swing.JPanel {

    protected BufferedImage image;
    private BufferedImage imageOld;
    private JFileChooser fc;
    protected Dimension imageDimension = new Dimension(160,120);
    private Border border;
    private boolean editable = false;
    private List<PropertyChangeListener> changeListeners = new ArrayList<PropertyChangeListener>();

    /** Creates new form LMAdviceImagePanel */
    public LOSImagePanel() {
        initComponents();
        setEditable(editable);
    }

    public void addImageSource( final LOSImageSource source ) {
        JMenuItem btSource = new JMenuItem();
        btSource.setText(source.getTitle());
        btSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BufferedImage imageNew = source.getImage();
                if( imageNew == null ) {
                    return;
                }
                image = imageNew;
                fireItemChangedEvent();
                setImage(imageNew);
            }
        });
        jPopupMenu1.add(btSource);
    }

    public void addItemChangeListener(PropertyChangeListener l) {
        if(!changeListeners.contains(l))
            changeListeners.add(l);
    }
    public void removeItemChangedListener(PropertyChangeListener l) {
        changeListeners.remove(l);
    }

    public void fireItemChangedEvent(){
        if( changeListeners.size() > 0 ) {
            if( (imageOld==null && image != null) || (imageOld != null && !imageOld.equals(image)) ) {
                PropertyChangeEvent pce = new PropertyChangeEvent(this, LOSComponentEvent.ITEM_CHANGED, null, image);
                for (PropertyChangeListener p : changeListeners) {
                    p.propertyChange(pce);
                }
            }
        }
        imageOld = image;
    }


    public Dimension getPreferredImageSize() {
        return imageDimension;
    }
    public void setPreferredImageSize( Dimension dim ) {
        imageDimension = dim;
        imageLabel.setPreferredSize(dim);
    }

    public void setEditable( boolean editable ) {
        this.editable = editable;
        if( editable ) {
            btFunction.setVisible(true);
            setBorder(border);
        }
        else {
            btFunction.setVisible(false);
            border = getBorder();
            setBorder(null);
        }
    }

    public void setImageBorder( Border border ) {
        if( imageLabel != null )
            imageLabel.setBorder(border);
    }
    public Border getImageBorder() {
        return imageLabel == null ? null : imageLabel.getBorder();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        btRemove = new javax.swing.JMenuItem();
        btSelect = new javax.swing.JMenuItem();
        imageLabel = new javax.swing.JLabel();
        btFunction = new javax.swing.JButton();

        btRemove.setText("Remove image");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });
        jPopupMenu1.add(btRemove);

        btSelect.setText("Select file");
        btSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectActionPerformed(evt);
            }
        });
        jPopupMenu1.add(btSelect);

        setLayout(new java.awt.GridBagLayout());

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        imageLabel.setComponentPopupMenu(jPopupMenu1);
        imageLabel.setPreferredSize(new java.awt.Dimension(160, 120));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(imageLabel, gridBagConstraints);

        btFunction.setText("...");
        btFunction.setMinimumSize(new java.awt.Dimension(24, 22));
        btFunction.setPreferredSize(new java.awt.Dimension(24, 22));
        btFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFunctionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        add(btFunction, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFunctionActionPerformed
        jPopupMenu1.show(btFunction, 1, 1);
}//GEN-LAST:event_btFunctionActionPerformed

    private void btSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectActionPerformed
        selectFile();
}//GEN-LAST:event_btSelectActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        image=null;
        fireItemChangedEvent();
        setImage(null);
}//GEN-LAST:event_btRemoveActionPerformed

    /**
     * @return the image
     */
    public BufferedImage getImage() {
        return image;
    }

    /**
     * @param image the image to set
     */
    public void setImage(BufferedImage image) {
        imageOld = image;
        this.image = image;

        if( image == null ) {
            Image i = ImageUtilities.loadImage("de/linogistix/common/res/img/no-photo.png", true);
            imageLabel.setIcon(new ImageIcon(i.getScaledInstance(160, 120, Image.SCALE_SMOOTH)));
            return;
        }

        double fctWidth = getWidth();
        fctWidth /= image.getWidth();
        double fctHeigth = getHeight();
        fctHeigth /= image.getHeight();
        double fct= fctWidth > fctHeigth ? fctHeigth : fctWidth;
        int width = (int)(image.getWidth()*fct);
        int height = (int)(image.getHeight()*fct);
        if( width <= 0 || height <= 0 ) {
            return;
        }

        imageLabel.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH)));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btFunction;
    private javax.swing.JMenuItem btRemove;
    private javax.swing.JMenuItem btSelect;
    protected javax.swing.JLabel imageLabel;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables

    public BufferedImage selectFile() {
        BufferedImage img = null;
        if (fc == null) {
            fc = new JFileChooser();
            String desc = NbBundle.getMessage(CommonBundleResolver.class, "LOSImagePanel.description");
            FileNameExtensionFilter filter = new FileNameExtensionFilter(desc, "jpeg", "jpg", "png", "gif", "tiff", "tif");
            fc.setFileFilter(filter);
            fc.setAccessory(new LOSImagePreview(fc));
        }

        String buttonName = NbBundle.getMessage(CommonBundleResolver.class, "LOSImagePanel.buttonName");
        int returnVal = fc.showDialog(this, buttonName);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                img = ImageIO.read(file);
                image = img;
                fireItemChangedEvent();
                setImage(img);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }


        fc.setSelectedFile(null);

        return img;
    }

    @Override
    public boolean requestFocusInWindow() {
        return btFunction.requestFocusInWindow();
    }

    @Override
    public void requestFocus() {
        btFunction.requestFocus();
    }

    @Override
    public boolean hasFocus() {
        return btFunction.hasFocus();
    }

    @Override
    public boolean isFocusable() {
        return btFunction.isFocusable();
    }

    @Override
    public void setFocusable(boolean focusable) {
        btFunction.setFocusable(focusable);
    }
}
