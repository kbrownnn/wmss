/*
 * Copyright (c) 2006 - 2012 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.bobrowser.bo.editor;

import de.linogistix.common.bobrowser.bo.detailview.AbstractDetailViewPanel;
import de.linogistix.common.bobrowser.bo.BONode;
import de.linogistix.common.res.CommonBundleResolver;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author  trautm
 */
public class BOMasterDetailView extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider, VetoableChangeListener{
  
  private Logger log = Logger.getLogger(BOMasterDetailView.class.getName());
  
  ExplorerManager manager;
  
  private OutlineView tableView;

  JTabbedPane detailViewTabbedPane;
  
  Lookup lookup;
  
  Class bundleResolver;
  
  protected BONode boNode;

  boolean showDetail = true;
 
  protected final Object semaphore = new Object();
  

  private List<AbstractDetailViewPanel> viewPanels = new ArrayList<AbstractDetailViewPanel>();;

  /** Creates new form BOMasterDetailView
   *
   * @param manager if null, a new instance of ExplorerManager is created
   */
  public BOMasterDetailView(ExplorerManager manager, BONode boNode, Class bundleResolver) {
  
    this.bundleResolver = bundleResolver;
    this.boNode = boNode;
    if (manager != null){
      this.manager = manager;
    } else{
      this.manager = new ExplorerManager();
    }
    
    // some Actions
    ActionMap map = getActionMap();
    InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    lookup = ExplorerUtils.createLookup(this.manager, map);
    
    initComponents();
    countLabel.setText(null);
    initMasterTableView();
    initDetailView();
 
    manager.addVetoableChangeListener(this);
  }
  
  public ExplorerManager getExplorerManager() {
    return manager;
  }
  
  public Lookup getLookup() {
    return lookup;
  }

  public Lookup getDetailLookup(){
      return getLookup();
  }
  
  public AbstractDetailViewPanel getDetailView(){
    return (AbstractDetailViewPanel) detailViewTabbedPane.getSelectedComponent();
  }
  
  public JScrollPane getMasterView(){
    return tableView;  
  }

  // ...methods as before, but replace componentActivated and
  // componentDeactivated with e.g.:
    @Override
  public void addNotify() { 
    super.addNotify();
    ExplorerUtils.activateActions(manager, true);
    
  }
  
    @Override
  public void removeNotify() {
    ExplorerUtils.activateActions(manager, false);
    super.removeNotify();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        masterPanel = new javax.swing.JPanel();
        masterFooterPanel = new javax.swing.JPanel();
        countLabel = new javax.swing.JLabel();
        sumLabel = new javax.swing.JLabel();
        detailPanel = createDetailPanel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setResizeWeight(1.0);

        masterPanel.setLayout(new java.awt.BorderLayout());

        masterFooterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        masterFooterPanel.setLayout(new java.awt.BorderLayout());

        countLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"entryCount")); // NOI18N
        masterFooterPanel.add(countLabel, java.awt.BorderLayout.CENTER);

        sumLabel.setText(org.openide.util.NbBundle.getMessage(CommonBundleResolver.class, "BOMasterDetailView.sumLabel.text")); // NOI18N
        masterFooterPanel.add(sumLabel, java.awt.BorderLayout.WEST);

        masterPanel.add(masterFooterPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(masterPanel);

        detailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        detailPanel.setMaximumSize(new java.awt.Dimension(300, 2147483647));
        detailPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(detailPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
  
  
  private void initMasterTableView() {
    tableView = new OutlineView(boNode.getBo().getDisplayName());
    tableView.getOutline().setRootVisible (false);
    tableView.setProperties(boNode.getBo().getBoMasterNodeProperties());
    masterPanel.add(tableView, BorderLayout.CENTER);
  }
  

  public void setColumnLabel(String label) {
    DefaultOutlineModel model = (DefaultOutlineModel) tableView.getOutline().getModel();
    model.setNodesColumnLabel(label);
  }

    protected void initDetailView() {

        Class[] classes = this.boNode.getBo().getDetailViewClasses();

        detailViewTabbedPane = new JTabbedPane();
        for( Class clz : classes ) {
            try {
                AbstractDetailViewPanel pnl = (AbstractDetailViewPanel) clz.newInstance();
                if( pnl == null ) {
                    log.log(Level.WARNING, "No new instance of class="+clz.getName());
                }
                else {
                    pnl.setPreferredSize(new Dimension(250,250));
                    pnl.setBoNode(this.boNode);
                    pnl.setLookup(getDetailLookup());
                    if( classes.length>1 ) {
                        detailViewTabbedPane.addTab(pnl.getPanelName(), pnl);
                    }
                    else {
                        detailPanel.add(pnl, BorderLayout.CENTER);
                    }
                    viewPanels.add(pnl);
                }
            } catch (Throwable ex) {
                log.log(Level.SEVERE, ex.getMessage(), ex);
                continue;
            }
        }

        if( classes.length>1 ) {
            detailPanel.add(detailViewTabbedPane, BorderLayout.CENTER);
        }
    }

  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  
      
//      System.out.println("----- Master Detail Vetoable Change -----");
  }
  
  public void updateCounter(){
      this.countLabel.setText("-");
  }
    
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel countLabel;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel masterFooterPanel;
    private javax.swing.JPanel masterPanel;
    protected javax.swing.JLabel sumLabel;
    // End of variables declaration//GEN-END:variables
  
  protected JPanel createDetailPanel(){
   JPanel detail = new JPanel();
   return detail;
  }
  
  public JPanel getDetailPanel() {
    return detailPanel;
  }

    private int dividerSize=-1;

    public void showDetails(boolean show) {
        if( jSplitPane1.getDividerSize() > 0 ) {
            dividerSize = jSplitPane1.getDividerSize();
        }
        if( show ) {
            detailPanel.setVisible(true);
            jSplitPane1.setDividerLocation(-1);
            if( dividerSize>0 )
                jSplitPane1.setDividerSize(dividerSize);
        }
        else {
            detailPanel.setVisible(false);
            jSplitPane1.setDividerSize(0);
        }

        for (AbstractDetailViewPanel pnl : viewPanels){
            pnl.setPanelVisible(show);
        }
    }
    
  public List<AbstractDetailViewPanel> getDetailViews(){
      return this.viewPanels;
  }
  

    public Preferences restoreSettings( Preferences prefs ) {
        try {
            String prefix=this.getClass().getSimpleName();

            Properties props = new Properties();
            for ( String key : prefs.keys() ) {
                if ( key.startsWith(prefix+"masterView") ) {
                    props.put(key, prefs.get(key, null));
                }
            }
            if( props.size()>0 ) {
                tableView.readSettings(props, prefix+"masterView");
            }

            logProps(props, "SET Property");

            String s = prefs.get(prefix+"selectedTab", null);
            if( s != null ) {
                int idx = Integer.valueOf(s);
                detailViewTabbedPane.setSelectedIndex(idx);
            }

        } catch( Throwable t ) {
            log.warning("Cannot restore settings: bo="+boNode.getName()+", "+t.getClass().getSimpleName()+", "+t.getMessage());
            prefs = clearSettings(prefs);
        }
        return prefs;
    }
    public Preferences storeSettings( Preferences prefs ) {
        try {
            String prefix=this.getClass().getSimpleName();

            prefs = clearSettings(prefs);

            Properties props = new Properties();
            tableView.writeSettings(props, prefix+"masterView");

            logProps(props, "STORE Property");
            for (String key : props.stringPropertyNames()) {
                prefs.put(key, props.getProperty(key));
            }

            prefs.put(prefix+"selectedTab", String.valueOf(detailViewTabbedPane.getSelectedIndex()) );

        } catch( Throwable t ) {
            log.warning("Cannot store settings: bo="+boNode.getName()+", "+t.getClass().getSimpleName()+", "+t.getMessage());
            prefs = clearSettings(prefs);
        }
        return prefs;
    }
    public Preferences clearSettings( Preferences prefs ) {
        try {
            String prefix=this.getClass().getSimpleName();
            for ( String key : prefs.keys() ) {
                if ( key.startsWith(prefix) ) {
                    prefs.remove(key);
                }
            }
        } catch( Throwable t ) {
            log.warning("Cannot clear settings: bo="+boNode.getName()+", "+t.getClass().getSimpleName()+", "+t.getMessage());
        }
        return prefs;
    }

    private void logProps( Properties props, String prefix ) {
        System.out.println(boNode.getName()+", "+boNode.getDisplayName()+", "+boNode.getBo().getName());
        Object[] keys = props.keySet().toArray();
        Arrays.sort(keys);
        for( Object key : keys ) {
            System.out.println(prefix+" Key="+key.toString()+", Value="+props.get(key).toString());
        }
    }
}
