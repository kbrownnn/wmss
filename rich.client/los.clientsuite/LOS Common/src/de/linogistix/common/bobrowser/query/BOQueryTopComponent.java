/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.bobrowser.query;

import de.linogistix.common.bobrowser.api.BOLookup;
import de.linogistix.common.bobrowser.bo.BO;
import de.linogistix.common.bobrowser.bo.BONode;
import de.linogistix.common.res.CommonBundleResolver;
import de.linogistix.common.gui.gui_builder.AbstractFooterPanel;
import de.linogistix.common.services.J2EEServiceLocator;
import de.linogistix.common.userlogin.LoginService;
import de.linogistix.common.util.BundleResolve;
import de.linogistix.los.model.LOSCommonPropertyKey;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

/**
 * Top component which displays queries of entities.
 */
public class BOQueryTopComponent extends TopComponent
        implements Lookup.Provider, ExplorerManager.Provider, Serializable {

    private static final Logger log = Logger.getLogger(BOQueryTopComponent.class.getName());
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "de/linogistix/bobrowser/res/icon/Search.png";
    private String preferredId = "BOQueryTopComponent";
    private BOQueryPanel boQueryPanel;
    private BONode node;
    private BOQueryModel model;
    private boolean editabelDetail = false; 
                                      
    private JTabbedPane detailedTabbedPane;
    private JSplitPane jSplitPane1;
    private AbstractFooterPanel footerPanel;
    
    private boolean beenInitialized = false;
    
    public BOQueryTopComponent(BONode node) {
        this(node, false);
    }

    public BOQueryTopComponent(BONode node, boolean editabelDetail) {
        this.node = node;
        this.editabelDetail = editabelDetail;
        initComponents();
        initDecorations();
    }
    
    public BOQueryTopComponent(BONode node, BOQueryModel model, boolean editabelDetail) {
       
        this.node = node;
        this.editabelDetail = editabelDetail;
        this.model = model;
        initComponents();
        initDecorations();
    }

   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centerPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.BorderLayout());
        add(centerPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    // End of variables declaration//GEN-END:variables


    @Override
    public int getPersistenceType() {
        J2EEServiceLocator loc = (J2EEServiceLocator) Lookup.getDefault().lookup(J2EEServiceLocator.class);
        if( loc.getPropertyBool(LOSCommonPropertyKey.NBCLIENT_RESTORE_TABS, true) ) {
            return TopComponent.PERSISTENCE_ONLY_OPENED;
        }
        else {
            return TopComponent.PERSISTENCE_NEVER;
        }
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() throws ObjectStreamException {
        storeSettings();
        return new ResolvableHelper(node,editabelDetail);
    }

    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public ResolvableHelper(BONode node, boolean editabelDetail) {
            this.boClass = node.getBo().getClass();
            this.editabelDetail = editabelDetail;
        }
        private Class boClass;
        private boolean editabelDetail = false;

        public Object readResolve() throws Exception {
            if( boClass == null ) {
                log.log(Level.WARNING, "No boClass stored");
                return null;
            }
            BOLookup boLookup = Lookup.getDefault().lookup(BOLookup.class);
            BO bo = (BO)boLookup.lookup(boClass);
            if( bo == null ) {
                log.log(Level.WARNING, "No BO found for "+boClass.getSimpleName());
                return null;
            }
            BONode node = new BONode( bo );

            BOQueryTopComponent tc = null;
//            BOQueryTopComponentLookup tclookup = Lookup.getDefault().lookup(BOQueryTopComponentLookup.class);
//            BOQueryTopComponent tc = tclookup.findInstance(node);
            if( tc == null ) {
                tc = new BOQueryTopComponent(node,editabelDetail);
            }
            return tc;
        }
    }
    //-------------------------------------------------------------------------
    
    @Override
    public void componentOpened() {
        
        if (!hasBeenInitialized()){
            
            LoginService login = (LoginService) Lookup.getDefault().lookup(LoginService.class);
            login.addLoginStateChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    close();
                }
            });
            
            initBOQueryPanel();

            initLookup();

            postInit();

            setInitialized(true);

            restoreSettings();

        }

        J2EEServiceLocator loc = (J2EEServiceLocator) Lookup.getDefault().lookup(J2EEServiceLocator.class);
        if( loc.getPropertyBool(LOSCommonPropertyKey.NBCLIENT_SELECTION_ON_START, true) ) {
            boQueryPanel.reload();
        }

    }


    @Override
    public void componentActivated() {
        super.componentActivated();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                if( boQueryPanel!=null ) {
                    boQueryPanel.getHeaderPanel().invalidate();
                    boQueryPanel.getMasterDetailView().invalidate();
                }
                validate();
            }
        });
    }

    //-------------------------------------------------------------------------
    
    public BOQueryPanel getBOQueryPanel() {
        return this.boQueryPanel;
    }

    public ExplorerManager getExplorerManager() {
        if (this.boQueryPanel != null && this.boQueryPanel.isInitialized()){
            return this.boQueryPanel.getExplorerManager();
        }
        
        return null;
    }

    public void setPreferredId(String findTopComponentID) {
        this.preferredId = findTopComponentID;
    }
    
    protected String preferredId() {
        return preferredId;
    }

    //-------------------------------------------------------------------------
    
    protected void initDecorations() {
        this.preferredId = this.node.getName();
        String descr = BundleResolve.resolve(
                new Class[]{this.node.getBo().getBundleResolver(), CommonBundleResolver.class, CommonBundleResolver.class},
                preferredId,
                null);
        setName(preferredId);
        setDisplayName(descr);
        setToolTipText(descr);
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    }
    
    protected void initLookup() {
        
        Action strgF = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                boQueryPanel.getHeaderPanel().onStrgF();
            }
        };

         Action reload = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                boQueryPanel.reload();
            }
        };

        ActionMap map = getActionMap();
        InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "reloadQuery");
        keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK), "Strg-f");
//        map.put("reloadQuery", SystemAction.get(RefreshBOBeanNodeAction.class));
        map.put("reloadQuery", reload);
        map.put("Strg-f", strgF);
        
        try {        
            associateLookup(ExplorerUtils.createLookup(getExplorerManager(), map));
        } catch (IllegalStateException ex) {
            //already done!?
            log.log(Level.INFO, ex.getMessage(), ex);
            return;
        }
    }
    
     protected void initBOQueryPanel() {
        if (this.boQueryPanel == null){
            if (this.model == null){
                this.boQueryPanel = new BOQueryPanel(node, editabelDetail);
            } else{
                this.boQueryPanel = new BOQueryPanel(node, model, editabelDetail);
            }
//            boQueryPanel.reload();
            centerPanel.add(this.boQueryPanel, BorderLayout.CENTER);
        }
//        invalidate();
//        validate();
        
    }
     
     protected void postInit(){
//         invalidate();
//         validate();
     }

    
    //-------------------------------------------------------------------------
     
     protected void createTabbedPane(){
        centerPanel.remove(boQueryPanel);
        
        jSplitPane1 = new javax.swing.JSplitPane();     
        detailedTabbedPane = new javax.swing.JTabbedPane();
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        
        jSplitPane1.setTopComponent(boQueryPanel);
        jSplitPane1.setBottomComponent(detailedTabbedPane);
//        jSplitPane1.setResizeWeight(0L);
        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setContinuousLayout(true);
        
        centerPanel.add(jSplitPane1, java.awt.BorderLayout.CENTER);

     }
     
     protected void addTab(String tile, JComponent component){
         detailedTabbedPane.add(tile, component);
     }
     
     
     protected void addFooterPanel(AbstractFooterPanel panel){
         this.footerPanel = panel;
         add(this.footerPanel, BorderLayout.SOUTH);
     }

    public boolean hasBeenInitialized() {
        return beenInitialized;
    }

    public void setInitialized(boolean beenInitialized) {
        this.beenInitialized = beenInitialized;
    }

    public void setColumnLabel(String label) {
        boQueryPanel.getMasterDetailView().setColumnLabel(label);
    }

    private void restoreSettings( ) {
        if( boQueryPanel == null || !boQueryPanel.isInitialized() ) {
            return;
        }
        try {
            Preferences prefs = NbPreferences.forModule(BOQueryPanel.class).node(node.getName());
            boQueryPanel.getHeaderPanel().restoreSettings( prefs );
//            boQueryPanel.getMasterDetailView().restoreSettings( prefs );
        } catch (Throwable t) {
            log.log(Level.WARNING, "Cannot restore settings: "+t.getClass().getSimpleName()+", "+t.getMessage(), t);
        }
    }
    public void storeSettings() {
        if( boQueryPanel == null || !boQueryPanel.isInitialized() ) {
            return;
        }
        try {
            Preferences prefs = NbPreferences.forModule(BOQueryPanel.class).node(node.getName());
            prefs = boQueryPanel.getHeaderPanel().storeSettings( prefs );
//            prefs = boQueryPanel.getMasterDetailView().storeSettings( prefs );
            prefs.flush();
        } catch (Throwable t) {
            log.log(Level.WARNING, "Cannot restore settings: "+t.getClass().getSimpleName()+", "+t.getMessage(), t);
        }

    }
}
